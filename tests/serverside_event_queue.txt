Doctests for the Fabula Package
==============================

Serverside Event Queue
----------------------

    >>> import fabula.plugins.serverside
    >>> import fabula.interfaces
    >>> import fabula.run
    >>> class QueueTest(fabula.plugins.serverside.DefaultGame):
    ...     def __init__(self, host):
    ...         fabula.plugins.serverside.DefaultGame.__init__(self, host)
    ...         self.host.interface.connect("dummy_client")
    ...         init_message = fabula.Message([fabula.InitEvent("dummy_client")])
    ...         self.host.interface.connections["dummy_client"].messages_for_local.append(init_message)
    ...         self.queue_messages(fabula.Message([fabula.PerceptionEvent("player_entity", "Test Queue 1")]),
    ...                             fabula.Message([fabula.PerceptionEvent("player_entity", "Test Queue 2")]),
    ...                             fabula.Message([fabula.PerceptionEvent("player_entity", "Test Queue 3")]))
    ...
    ...     def process_message(self, message):
    ...         fabula.plugins.serverside.DefaultGame.process_message(self, message)
    ...         if len(self.message_for_host.event_list):
    ...             print("message_for_host == {}".format(self.message_for_host))
    ...         return self.message_for_host
    ...
    ...     def process_InitEvent(self, event, **kwargs):
    ...         self.message_for_host.event_list.extend([fabula.EnterRoomEvent(client_identifier = event.identifier,
    ...                                                                       room_identifier = "test"),
    ...                                                  fabula.ChangeMapElementEvent(fabula.Tile(fabula.FLOOR, {"text/plain": fabula.Asset("dummy_asset")}), (0, 0, "test")),
    ...                                                  fabula.SpawnEvent(fabula.Entity("player_entity", fabula.PLAYER, True, True, {"text/plain" : fabula.Asset("dummy.png")}), (0, 0, "test")),
    ...                                                  fabula.RoomCompleteEvent()])
    ...         return
    ...
    >>> app = fabula.run.App(timeout = 5)
    >>> app.server_plugin_class = QueueTest
    >>> interface = fabula.interfaces.Interface()
    >>> app.run_server(60, interface, 1.0) # doctest: +ELLIPSIS
    ============================================================
    Fabula ... Server
    ------------------------------------------------------------
    <BLANKLINE>
    Press [Ctrl] + [C] to stop the server.
    message_for_host == fabula.Message(event_list = [fabula.EnterRoomEvent(client_identifier = 'dummy_client', room_identifier = 'test'), fabula.ChangeMapElementEvent(location = (0, 0, 'test'), tile = fabula.Tile(tile_type = fabula.FLOOR, assets = {'text/plain': fabula.Asset(uri = 'dummy_asset', data = None)})), fabula.SpawnEvent(entity = fabula.Entity(identifier = 'player_entity', entity_type = fabula.PLAYER, blocking = True, mobile = True, assets = {'text/plain': fabula.Asset(uri = 'dummy.png', data = None)}), location = (0, 0, 'test')), fabula.RoomCompleteEvent()])
    message_for_host == fabula.Message(event_list = [fabula.PerceptionEvent(identifier = 'player_entity', perception = 'Test Queue 1')])
    message_for_host == fabula.Message(event_list = [fabula.PerceptionEvent(identifier = 'player_entity', perception = 'Test Queue 2')])
    message_for_host == fabula.Message(event_list = [fabula.PerceptionEvent(identifier = 'player_entity', perception = 'Test Queue 3')])
    <BLANKLINE>
    Shutting down server.
    <BLANKLINE>
    Shutdown complete. A log file should be at fabula-server.log
    <BLANKLINE>
    >>>
